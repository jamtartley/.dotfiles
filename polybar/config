; polybar


[colors]
; color palette
; https://github.com/dracula/dracula-theme#color-palette
background = #282a36
current-line = #44475a
selection = #44475a
foreground = #f8f8f2
comment = #6272a4
cyan = #8be9fd
green = #50fa7b
orange = #ffb86c
pink = #ff79c6
purple = #bd93f9
red = #ff5555
yellow = #f1fa8c


[bar/main]
; Use either of the following command to list available outputs:
; If unspecified, the application will pick the first one it finds.
; $ polybar -m | cut -d ':' -f 1
; $ xrandr -q | grep " connected" | cut -d ' ' -f1
monitor = DP-1

; Use the specified monitor as a fallback if the main one is not found.
monitor-fallback = DP-2

; Require the monitor to be in connected state
; XRandR sometimes reports my monitor as being disconnected (when in use)
monitor-strict = false

; Tell the Window Manager not to configure the window.
; Use this to detach the bar if your WM is locking its size/position.
override-redirect = false

; Put the bar at the bottom of the screen
bottom = false

; Prefer fixed center position for the `modules-center` block
; When false, the center position will be based on the size of the other blocks.
fixed-center = true

; Dimension defined as pixel value (e.g. 35) or percentage (e.g. 50%),
; the percentage can optionally be extended with a pixel offset like so:
; 50%:-10, this will result in a width or height of 50% minus 10 pixels
; width = 
height = 32

; Offset defined as pixel value (e.g. 35) or percentage (e.g. 50%)
; the percentage can optionally be extended with a pixel offset like so:
; 50%:-10, this will result in an offset in the x or y direction 
; of 50% minus 10 pixels
; offset-x = 
offset-y = 12

; Background ARGB color (e.g. #f00, #ff992a, #ddff1023)
background = ${colors.background}

; Foreground ARGB color (e.g. #f00, #ff992a, #ddff1023)
foreground = ${colors.background}

; Background gradient (vertical steps)
;   background-[0-9]+ = #aarrggbb
; background-0 = 

; Value used for drawing rounded corners
; Note: This shouldn't be used together with border-size because the border 
; doesn't get rounded. For this to work you may also need to enable 
; pseudo-transparency or use a compositor like compton.
; Individual top/bottom values can be defined using:
;   radius-{top,bottom}
; radius = 

; Under-/overline pixel size and argb color
; Individual values can be defined using:
;   {overline,underline}-size
;   {overline,underline}-color
line-size = 2
; line-color = 

; Values applied to all borders
; Individual side values can be defined using:
;   border-{left,top,right,bottom}-size
;   border-{left,top,right,bottom}-color
; The top and bottom borders are added to the bar height, so the effective
; window height is:
;   height + border-top-size + border-bottom-size
; Meanwhile the effective window width is defined entirely by the width key and
; the border is placed withing this area. So you effectively only have the
; following horizontal space on the bar:
;   width - border-right-size - border-left-size
; border-size = 
; border-color = 

; Number of spaces to add at the beginning/end of the bar
; Individual side values can be defined using:
;   padding-{left,right}
padding = 0

; Number of spaces to add before/after each module
; Individual side values can be defined using:
;   module-margin-{left,right}
module-margin = 0

; Fonts are defined using <font-name>;<vertical-offset>
; Font names are specified using a fontconfig pattern.
;   font-0 = NotoSans-Regular:size=8;2
;   font-1 = MaterialIcons:size=10
;   font-2 = Termsynu:size=8;-1
;   font-3 = FontAwesome:size=10
; See the Fonts wiki page for more details
font-0 = M+ 1mn:style=regular:size=10;2
font-1 = mplus Nerd Font:style=regular:size=10;2
font-2 = mplus Nerd Font:style=regular:size=17;4
font-3 = mplus Nerd Font:style=regular:size=18;4

; Modules are added to one of the available blocks
;   modules-left = cpu ram
;   modules-center = xwindow xbacklight
;   modules-right = ipc clock
modules-left = launcher left1 title left2
modules-center = workspaces
modules-right = right5 alsa right4 memory right3 cpu right2 time right1 powermenu

; The separator will be inserted between the output of each module
; separator = 

; This value is used to add extra spacing between elements
; @deprecated: This parameter will be removed in an upcoming version
; spacing = 

; Opacity value between 0.0 and 1.0 used on fade in/out
dim-value = 1.0

; Value to be used to set the WM_NAME atom
; If the value is empty or undefined, the atom value
; will be created from the following template: polybar-[BAR]_[MONITOR]
; NOTE: The placeholders are not available for custom values
wm-name = i3

; Locale used to localize various module data (e.g. date)
; Expects a valid libc locale, for example: sv_SE.UTF-8
; locale = 

; Position of the system tray window
; If empty or undefined, tray support will be disabled
; NOTE: A center aligned tray will cover center aligned modules
;
; Available positions:
;   left
;   center
;   right
;   none
tray-position = none

; If true, the bar will not shift its
; contents when the tray changes
tray-detached = false

; Tray icon max size
tray-maxsize = 16

; DEPRECATED! Since 3.3.0 the tray always uses pseudo-transparency
; Enable pseudo transparency
; Will automatically be enabled if a fully transparent
; background color is defined using `tray-background`
tray-transparent = false

; Background color for the tray container 
; ARGB color (e.g. #f00, #ff992a, #ddff1023)
; By default the tray container will use the bar
; background color.
tray-background = ${root.background}

; Tray offset defined as pixel value (e.g. 35) or percentage (e.g. 50%)
tray-offset-x = 0
tray-offset-y = 0

; Pad the sides of each tray icon
tray-padding = 0

; Scale factor for tray clients
tray-scale = 1.0

; Restack the bar window and put it above the
; selected window manager's root
;
; Fixes the issue where the bar is being drawn
; on top of fullscreen window's
;
; Currently supported WM's:
;   bspwm
;   i3 (requires: `override-redirect = true`)
; wm-restack =

; Set a DPI values used when rendering text
; This only affects scalable fonts
; Set this to 0 to let polybar calculate the dpi from the screen size.
; dpi = 
dpi-x = 96
dpi-y = 96

; Enable support for inter-process messaging
; See the Messaging wiki page for more details.
enable-ipc = false

; Fallback click handlers that will be called if
; there's no matching module handler found.
click-left = 
click-middle = 
click-right =
scroll-up = i3wm-wsnext
scroll-down = i3wm-wsprev
double-click-left =
double-click-middle =
double-click-right =

; Requires polybar to be built with xcursor support (xcb-util-cursor)
; Possible values are:
; - default   : The default pointer as before, can also be an empty string (default)
; - pointer   : Typically in the form of a hand
; - ns-resize : Up and down arrows, can be used to indicate scrolling
cursor-click = 
cursor-scroll = 


[module/left1]
type = custom/text
content = "%{T3}%{T-}"

; "content" has the same properties as "format-NAME"
content-background = ${colors.orange}
content-foreground = ${colors.green}

[module/left2]
type = custom/text
content = "%{T3}%{T-}"

; "content" has the same properties as "format-NAME"
content-background = ${root.background}
content-foreground = ${colors.orange}

[module/right1]
type = custom/text
content = "%{T4}%{T-}"

; "content" has the same properties as "format-NAME"
content-background = ${colors.yellow}
content-foreground = ${colors.cyan}

[module/right2]
type = custom/text
content = "%{T4}%{T-}"

; "content" has the same properties as "format-NAME"
content-background = ${colors.red}
content-foreground = ${colors.yellow}

[module/right3]
type = custom/text
content = "%{T4}%{T-}"

; "content" has the same properties as "format-NAME"
content-background = ${colors.purple}
content-foreground = ${colors.red}

[module/right4]
type = custom/text
content = "%{T4}%{T-}"

; "content" has the same properties as "format-NAME"
content-background = ${colors.pink}
content-foreground = ${colors.purple}

[module/right5]
type = custom/text
content = "%{T4}%{T-}"

; "content" has the same properties as "format-NAME"
content-background = ${root.background}
content-foreground = ${colors.pink}

[module/launcher]
type = custom/text
content = 

; "content" has the same properties as "format-NAME"
content-background = ${colors.green}
content-foreground = ${root.foreground}
content-padding = 2

; "click-(left|middle|right)" will be executed using "/usr/bin/env sh -c $COMMAND"
click-left = rofi -show drun -fullscreen True

[module/title]
type = internal/xwindow

; Available tags:
;   <label> (default)
format = <label>
format-background = ${colors.orange}
format-foreground = ${root.foreground}
format-padding = 2

; Available tokens:
;   %title%
; Default: %title%
label = %title%
label-maxlen = 32

; Used instead of label when there is no window title
; Available tokens:
;   None
label-empty = glyphi@archlinux ~
label-empty-foreground = ${root.foreground}


[module/workspaces]
type = internal/xworkspaces

; Only show workspaces defined on the same output as the bar
;
; Useful if you want to show monitor specific workspaces
; on different bars
;
; Default: false
pin-workspaces = true

; Create click handler used to focus desktop
; Default: true
enable-click = true

; Create scroll handlers used to cycle desktops
; Default: true
enable-scroll = false

; Available tags:
;   <label-monitor>
;   <label-state> - gets replaced with <label-(active|urgent|occupied|empty)>
; Default: <label-state>
format = <label-state>

; Available tokens:
;   %name%
; Default: %name%
label-monitor = %name%

; Available tokens:
;   %name%
;   %icon%
;   %index%
; Default: %icon%  %name%
label-active = ﱣ
label-active-foreground = ${colors.cyan}
label-active-background = ${root.background}
label-active-padding = 2

; Available tokens:
;   %name%
;   %icon%
;   %index%
; Default: %icon%  %name%
label-occupied = ﱣ
label-occupied-foreground = ${colors.cyan}
label-occupied-background = ${root.background}
label-occupied-padding = 2

; Available tokens:
;   %name%
;   %icon%
;   %index%
; Default: %icon%  %name%
label-urgent = ﱣ
label-urgent-foreground = ${colors.red}
label-urgent-background = ${root.background}
label-urgent-padding = 2

; Available tokens:
;   %name%
;   %icon%
;   %index%
; Default: %icon%  %name%
label-empty = ﱤ
label-empty-foreground = ${colors.foreground}
label-empty-padding = 2


[module/alsa]
type = internal/alsa

; Soundcard to be used
; Usually in the format hw:# where # is the card number
; You can find the different card numbers in `/proc/asound/cards`
master-soundcard = default
speaker-soundcard = default
headphone-soundcard = default

; Name of the master, speaker and headphone mixers
; Use the following command to list available mixer controls:
; $ amixer scontrols | sed -nr "s/.*'([[:alnum:]]+)'.*/\1/p"
; If master, speaker or headphone-soundcard isn't the default, 
; use `amixer -c # scontrols` instead where # is the number 
; of the master, speaker or headphone soundcard respectively
;
; Default: Master
master-mixer = Master

; Optionally define speaker and headphone mixers
; Default: none
speaker-mixer = Speaker
; Default: none
headphone-mixer = Headphone

; NOTE: This is required if headphone_mixer is defined
; Use the following command to list available device controls
; $ amixer controls | sed -r "/CARD/\!d; s/.*=([0-9]+).*name='([^']+)'.*/printf '%3.0f: %s\n' '\1' '\2'/e" | sort
; You may also need to use `amixer -c # controls` as above for the mixer names
; Default: none
headphone-id = 18

; Use volume mapping (similar to amixer -M and alsamixer), where the increase in volume is linear to the ear
; Default: false
mapped = true

; Interval for volume increase/decrease (in percent points)
; Default: 5
interval = 5.0

; Available tags:
;   <label-volume> (default)
;   <ramp-volume>
;   <bar-volume>
format-volume = <ramp-volume> <label-volume>
format-volume-background = ${colors.pink}
format-volume-padding = 2

; Available tags:
;   <label-muted> (default)
;   <ramp-volume>
;   <bar-volume>
; format-muted = <label-muted>

; Available tokens:
;   %percentage% (default)
; label-volume = %percentage%%

; Available tokens:
;   %percentage% (default)
label-muted = ﱝ
label-muted-foreground = ${root.foreground}

; Only applies if <ramp-volume> is used
ramp-volume-0 = 奄
ramp-volume-1 = 奔
ramp-volume-2 = 墳

; If defined, it will replace <ramp-volume> when
; headphones are plugged in to `headphone_control_numid`
; If undefined, <ramp-volume> will be used for both
; Only applies if <ramp-volume> is used
ramp-headphones-0 = 
ramp-headphones-1 = 


[module/memory]
type = internal/memory

; Seconds to sleep between updates
; Default: 1
interval = 1.0

; Available tags:
;   <label> (default)
;   <bar-used>
;   <bar-free>
;   <ramp-used>
;   <ramp-free>
;   <bar-swap-used>
;   <bar-swap-free>
;   <ramp-swap-used>
;   <ramp-swap-free>
format = <label>
format-background = ${colors.purple}
format-padding = 2

; Available tokens:
;   %percentage_used% (default)
;   %percentage_free%
;   %gb_used%
;   %gb_free%
;   %gb_total%
;   %mb_used%
;   %mb_free%
;   %mb_total%
;   %percentage_swap_used%
;   %percentage_swap_free%
;   %mb_swap_total%
;   %mb_swap_free%
;   %mb_swap_used%
;   %gb_swap_total%
;   %gb_swap_free%
;   %gb_swap_used%

label =  %gb_free%


[module/cpu]
type = internal/cpu

; Seconds to sleep between updates
; Default: 1
interval = 1.0

; Available tags:
;   <label> (default)
;   <bar-load>
;   <ramp-load>
;   <ramp-coreload>
format = <label>
format-background = ${colors.red}
format-padding = 2 

; Available tokens:
;   %percentage% (default) - total cpu load averaged over all cores
;   %percentage-sum% - Cumulative load on all cores
;   %percentage-cores% - load percentage for each core
;   %percentage-core[1-9]% - load percentage for specific core
label =  %percentage%%


[module/time]
type = internal/date

; Seconds to sleep between updates
interval = 1.0

; See "http://en.cppreference.com/w/cpp/io/manip/put_time" for details on how to format the date string
; NOTE: if you want to use syntax tags here you need to use %%{...}
; date = 

; Optional time format
time = %l:%M %p

; if `date-alt` or `time-alt` is defined, clicking
; the module will toggle between formats
; date-alt = 
; time-alt = 

; Available tags:
;   <label> (default)
format =  <label>
format-background = ${colors.yellow}
format-padding = 2

; Available tokens:
;   %date%
;   %time%
; Default: %date%
label = %time%
label-font = 1
label-foreground = ${root.foreground}

[module/powermenu]
type = custom/menu

; If true, <label-toggle> will be to the left of the menu items (default).
; If false, it will be on the right of all the items.
expand-right = true

; "menu-LEVEL-N" has the same properties as "label-NAME" with
; the additional "exec" property
;
; Available exec commands:
;   menu-open-LEVEL
;   menu-close
; Other commands will be executed using "/usr/bin/env sh -c $COMMAND"

menu-0-0 = Reboot
menu-0-0-exec = menu-open-1
menu-0-1 = Shutdown
menu-0-1-exec = menu-open-2

menu-1-0 = Confirm?
menu-1-0-exec = systemctl reboot

menu-2-0 = Confirm?
menu-2-0-exec = systemctl poweroff

; Available tags:
;   <label-toggle> (default) - gets replaced with <label-(open|close)>
;   <menu> (default)
; Note that if you use <label-toggle> you must also include
; the definition for <label-open>
;format = <label-toggle> <menu>
format-background = ${colors.cyan}
format-foreground = ${root.background}
format-spacing = 1
format-padding = 2

label-open = 襤
label-close = Back

; Optional item separator
; Default: none
label-separator = 
